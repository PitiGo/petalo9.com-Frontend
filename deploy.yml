---
- hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Project Configuration
    project_name: "petalo9-frontend"
    local_project_path: "/Users/dantecollazzi/Desktop/petalo9.com/Frontend-petalo9/petalo9.com-Frontend/"
    production_path: "/opt/petalo9-frontend"
    backup_path: "/opt/backups/petalo9-frontend"

    # Blue/Green Container Names
    container_name_blue: "{{ project_name }}-blue"
    container_name_green: "{{ project_name }}-green"

  tasks:
    - name: "Step 1: Pre-flight checks (connectivity and Docker)"
      block:
        - name: "Checking connection..."
          ping:
        - name: "Checking if Docker and Docker Compose exist"
          command: "{{ item }} --version"
          register: docker_check
          changed_when: false
          with_items:
            - docker
            - docker-compose

    - name: "Step 2: Backup current build (if it exists)"
      block:
        - name: "Check if 'build' directory exists"
          stat:
            path: "{{ production_path }}/build"
          register: build_dir
        - name: "Creating backup..."
          community.general.archive:
            path: "{{ production_path }}/build"
            dest: "{{ backup_path }}/build_backup_{{ ansible_date_time.iso8601_basic_short }}.tar.gz"
          when: build_dir.stat.exists

    - name: "Step 3: Synchronize project files to the server"
      block:
        - name: "Ensure production and backup directories exist"
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          with_items:
            - "{{ production_path }}"
            - "{{ backup_path }}"
        - name: "Copying project files with rsync"
          ansible.posix.synchronize:
            src: "{{ local_project_path }}"
            dest: "{{ production_path }}"
            delete: yes
            recursive: yes
            rsync_opts:
              - "--exclude=node_modules"
              - "--exclude=.git"
              - "--exclude=build"
              - "--exclude=.idea"

    - name: "Step 4: Determine active and inactive Blue/Green environment"
      block:
        - name: "Checking which container is active"
          shell: |
            set -e
            if docker ps --format '{% raw %}{{.Names}}{% endraw %}' | grep -q '^{{ container_name_blue }}$'; then
              echo "blue"
            elif docker ps --format '{% raw %}{{.Names}}{% endraw %}' | grep -q '^{{ container_name_green }}$'; then
              echo "green"
            else
              echo "none"
            fi
          args:
            executable: /bin/bash
          register: active_container_result
          changed_when: false
        - name: "Defining colors for the deployment"
          set_fact:
            active_color: "{{ active_container_result.stdout }}"
            inactive_color: "{{ 'green' if active_container_result.stdout == 'blue' else 'blue' }}"
        - name: "Displaying detected environment"
          debug:
            msg: "Active: {{ active_color }}, Deploying to: {{ inactive_color }}"

    - name: "Step 5: Build and start the new container ({{ inactive_color }})"
      community.docker.docker_compose_v2:
        project_src: "{{ production_path }}"
        files:
          - docker-compose-blue-green.yml
        services:
          - "{{ project_name }}-{{ inactive_color }}"
        state: present
        build: always

    - name: "Step 6: Verify that the new container is responding correctly"
      uri:
        url: "http://127.0.0.1:{{ '3004' if inactive_color == 'blue' else '3005' }}"
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: 5
      delay: 5

    - name: "Step 7: Update Nginx with the new build"
      block:
        - name: "Copying build files from the '{{ inactive_color }}' container to Nginx"
          command: "docker cp {{ project_name }}-{{ inactive_color }}:/usr/src/app/build/. {{ production_path }}/build/"
          changed_when: true
        - name: "Reloading Nginx to serve the new content"
          systemd:
            name: nginx
            state: reloaded

    - name: "Step 8: Cleanup - Stop and remove the old container ({{ active_color }})"
      community.docker.docker_container:
        name: "{{ project_name }}-{{ active_color }}"
        state: absent
      when: active_color != "none"

    - name: "Deployment finished!"
      debug:
        msg: "âœ… Success! The '{{ inactive_color }}' environment is now live."